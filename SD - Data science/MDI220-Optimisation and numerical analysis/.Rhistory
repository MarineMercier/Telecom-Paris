1-ppois(s,100*l)
}
lambda=seq(3,4,0.1)
Beta=lapply(lambda,FUN='beta')
plot(lambda,Beta,type='line',main="Fonction B en fonction de lambda")
beta = function(nb){
1-ppois(s,nb*3.5)
}
nombre_de_donnees=seq(60,150,1)
Beta=lapply(nombre_de_donnees,FUN='beta')
plot(nombre_de_donnees,Beta,type='line',main="fonction B en fonction de n")
i=1
while (Beta[i]<0.9){
i=i+1}
nombre_de_donnees[i]
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
data(discoveries)
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",type='h',
las = 1)
data(discoveries)
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",type='h',
las = 1)
n = length(discoveries)
max_vraisemblance_geo= 1/(1+sum(discoveries)/n)
print("theta =")
max_vraisemblance_geo
plot(dgeom(discoveries,max_vraisemblance_geo),ylab="Probabilité",main="Probabilité selon loi géométrique")
max_vraisemblance_poisson=sum(discoveries)/n
print("theta =")
max_vraisemblance_poisson
plot(dpois(discoveries,max_vraisemblance_geo),ylab="Probabilité pour loi de poisson",main="Probabilité selon loi de poisson")
esperance_echantillon = mean(discoveries)
variance_echantillon = var(discoveries)
print("esperance et variance de l'échantillon :")
esperance_echantillon
variance_echantillon
esperance_geo = (1 / max_vraisemblance_geo )
variance_geo = (( 1 - max_vraisemblance_geo)/( max_vraisemblance_geo ^2))
print("esperance et variance pour une loi géométrique :")
esperance_geo
variance_geo
esperance_poisson = max_vraisemblance_poisson
variance_poisson = max_vraisemblance_poisson
print("esperance et variance pour une loi de poisson :")
esperance_poisson
variance_poisson
hist(discoveries,xlim=c(0,12),breaks=10,proba=TRUE,freq=FALSE,col="blue")
density_geom=dgeom(seq(0,12,1),max_vraisemblance_geo)
density_poisson=dpois(seq(0,12,1),max_vraisemblance_poisson)
lines(seq(0,12,1),density_geom,col="red")
lines(seq(0,12,1),density_poisson,col="green")
legend(x="topright",legend=c("loi géométrique","loi de poisson"),col=c("red","green"),lty=1:1,cex=1)
loi_geom=qgeom(seq(0, 1, length.out = n) ,max_vraisemblance_geo)
discoveries_sorted=sort(discoveries)
plot(discoveries_sorted,loi_geom)
lines(discoveries_sorted,discoveries_sorted)
loi_poisson=qpois(seq(0, 1, length.out = n) ,max_vraisemblance_poisson)
plot(discoveries_sorted,loi_poisson)
lines(discoveries_sorted,discoveries_sorted)
vecteur_n=c(sum(discoveries==0),sum(discoveries==1),sum(discoveries==2),sum(discoveries==3),sum(discoveries==4),sum(discoveries>4))
vecteur_n
quantile=qchisq(0.95, 4)
vecteur_geom=dgeom(seq(0,4,1),max_vraisemblance_geo)
vecteur_geom=c(vecteur_geom,1-sum(vecteur_geom))
somme_geo=0
for (i in seq(1,6)){
res= somme_geo
somme_geo=res+((vecteur_n[i]-n*vecteur_geom[i])**2)/(n*vecteur_geom[i])
}
somme_geo<quantile
vecteur_poisson=dpois(seq(0,4,1),max_vraisemblance_poisson)
vecteur_poisson=c(vecteur_poisson,1-sum(vecteur_poisson))
somme_poisson=0
for (i in seq(1,6)){
res= somme_poisson
somme_poisson=res+((vecteur_n[i]-n*vecteur_poisson[i])**2)/(n*vecteur_poisson[i])
}
somme_poisson<quantile
s = qpois(0.95, 3*n)
s
sum(discoveries)>s
m=mean(discoveries)
min=ceiling(s/m)
min
beta = function(l){
1-ppois(s,100*l)
}
lambda=seq(3,4,0.1)
Beta=lapply(lambda,FUN='beta')
plot(lambda,Beta,type='line',main="Fonction B en fonction de lambda")
beta = function(nb){
1-ppois(s,nb*3.5)
}
nombre_de_donnees=seq(60,150,1)
Beta=lapply(nombre_de_donnees,FUN='beta')
plot(nombre_de_donnees,Beta,type='line',main="fonction B en fonction de n")
i=1
while (Beta[i]<0.9){
i=i+1}
nombre_de_donnees[i]
k = 0.25 + sum(discoveries)
k
theta = 1/(n + 1/20)
theta
esperance_posteriori = k * theta
esperance_posteriori
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
borne_sup = qgamma( (1+alpha)/2 ,shape = k, scale = theta)
[borne_inf,borne_sup]
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
borne_sup = qgamma( (1+alpha)/2 ,shape = k, scale = theta)
"["borne_inf,borne_sup"]"
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
borne_sup = qgamma( (1+alpha)/2 ,shape = k, scale = theta)
cat("I=[",borne_inf,borne_sup,"]")
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
borne_sup = qgamma( (1+alpha)/2 ,shape = k, scale = theta)
cat("I=[",borne_inf,borne_sup,"]")
data(discoveries)
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",type='h',
las = 1)
n = length(discoveries)
max_vraisemblance_geo= 1/(1+sum(discoveries)/n)
print("theta =")
max_vraisemblance_geo
plot(dgeom(discoveries,max_vraisemblance_geo),ylab="Probabilité",main="Probabilité selon loi géométrique")
max_vraisemblance_poisson=sum(discoveries)/n
print("theta =")
max_vraisemblance_poisson
plot(dpois(discoveries,max_vraisemblance_geo),ylab="Probabilité pour loi de poisson",main="Probabilité selon loi de poisson")
esperance_echantillon = mean(discoveries)
variance_echantillon = var(discoveries)
print("esperance et variance de l'échantillon :")
esperance_echantillon
variance_echantillon
esperance_geo = (1 / max_vraisemblance_geo )
variance_geo = (( 1 - max_vraisemblance_geo)/( max_vraisemblance_geo ^2))
print("esperance et variance pour une loi géométrique :")
esperance_geo
variance_geo
esperance_poisson = max_vraisemblance_poisson
variance_poisson = max_vraisemblance_poisson
print("esperance et variance pour une loi de poisson :")
esperance_poisson
variance_poisson
hist(discoveries,xlim=c(0,12),breaks=10,proba=TRUE,freq=FALSE,col="blue")
density_geom=dgeom(seq(0,12,1),max_vraisemblance_geo)
density_poisson=dpois(seq(0,12,1),max_vraisemblance_poisson)
lines(seq(0,12,1),density_geom,col="red")
lines(seq(0,12,1),density_poisson,col="green")
legend(x="topright",legend=c("loi géométrique","loi de poisson"),col=c("red","green"),lty=1:1,cex=1)
loi_geom=qgeom(seq(0, 1, length.out = n) ,max_vraisemblance_geo)
discoveries_sorted=sort(discoveries)
plot(discoveries_sorted,loi_geom)
lines(discoveries_sorted,discoveries_sorted)
loi_poisson=qpois(seq(0, 1, length.out = n) ,max_vraisemblance_poisson)
plot(discoveries_sorted,loi_poisson)
lines(discoveries_sorted,discoveries_sorted)
vecteur_n=c(sum(discoveries==0),sum(discoveries==1),sum(discoveries==2),sum(discoveries==3),sum(discoveries==4),sum(discoveries>4))
vecteur_n
quantile=qchisq(0.95, 4)
vecteur_geom=dgeom(seq(0,4,1),max_vraisemblance_geo)
vecteur_geom=c(vecteur_geom,1-sum(vecteur_geom))
somme_geo=0
for (i in seq(1,6)){
res= somme_geo
somme_geo=res+((vecteur_n[i]-n*vecteur_geom[i])**2)/(n*vecteur_geom[i])
}
somme_geo<quantile
vecteur_poisson=dpois(seq(0,4,1),max_vraisemblance_poisson)
vecteur_poisson=c(vecteur_poisson,1-sum(vecteur_poisson))
somme_poisson=0
for (i in seq(1,6)){
res= somme_poisson
somme_poisson=res+((vecteur_n[i]-n*vecteur_poisson[i])**2)/(n*vecteur_poisson[i])
}
somme_poisson<quantile
s = qpois(0.95, 3*n)
s
sum(discoveries)>s
m=mean(discoveries)
min=ceiling(s/m)
min
beta = function(l){
1-ppois(s,100*l)
}
lambda=seq(3,4,0.1)
Beta=lapply(lambda,FUN='beta')
plot(lambda,Beta,type='line',main="Fonction B en fonction de lambda")
beta = function(nb){
1-ppois(s,nb*3.5)
}
nombre_de_donnees=seq(60,150,1)
Beta=lapply(nombre_de_donnees,FUN='beta')
plot(nombre_de_donnees,Beta,type='line',main="fonction B en fonction de n")
i=1
while (Beta[i]<0.9){
i=i+1}
nombre_de_donnees[i]
k = 0.25 + sum(discoveries)
k
theta = 1/(n + 1/20)
theta
esperance_posteriori = k * theta
esperance_posteriori
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
borne_sup = qgamma( (1+alpha)/2 ,shape = k, scale = theta)
cat("I=[",borne_inf,borne_sup,"]")
data(discoveries)
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",type='h',
las = 1)
n = length(discoveries)
max_vraisemblance_geo= 1/(1+sum(discoveries)/n)
print("theta =")
max_vraisemblance_geo
plot(dgeom(discoveries,max_vraisemblance_geo),ylab="Probabilité",main="Probabilité selon loi géométrique")
max_vraisemblance_poisson=sum(discoveries)/n
print("theta =")
max_vraisemblance_poisson
plot(dpois(discoveries,max_vraisemblance_geo),ylab="Probabilité pour loi de poisson",main="Probabilité selon loi de poisson")
esperance_echantillon = mean(discoveries)
variance_echantillon = var(discoveries)
print("esperance et variance de l'échantillon :")
esperance_echantillon
variance_echantillon
esperance_geo = (1 / max_vraisemblance_geo )
variance_geo = (( 1 - max_vraisemblance_geo)/( max_vraisemblance_geo ^2))
print("esperance et variance pour une loi géométrique :")
esperance_geo
variance_geo
esperance_poisson = max_vraisemblance_poisson
variance_poisson = max_vraisemblance_poisson
print("esperance et variance pour une loi de poisson :")
esperance_poisson
variance_poisson
hist(discoveries,xlim=c(0,12),breaks=10,proba=TRUE,freq=FALSE,col="blue")
density_geom=dgeom(seq(0,12,1),max_vraisemblance_geo)
density_poisson=dpois(seq(0,12,1),max_vraisemblance_poisson)
lines(seq(0,12,1),density_geom,col="red")
lines(seq(0,12,1),density_poisson,col="green")
legend(x="topright",legend=c("loi géométrique","loi de poisson"),col=c("red","green"),lty=1:1,cex=1)
loi_geom=qgeom(seq(0, 1, length.out = n) ,max_vraisemblance_geo)
discoveries_sorted=sort(discoveries)
plot(discoveries_sorted,loi_geom)
lines(discoveries_sorted,discoveries_sorted)
loi_poisson=qpois(seq(0, 1, length.out = n) ,max_vraisemblance_poisson)
plot(discoveries_sorted,loi_poisson)
lines(discoveries_sorted,discoveries_sorted)
vecteur_n=c(sum(discoveries==0),sum(discoveries==1),sum(discoveries==2),sum(discoveries==3),sum(discoveries==4),sum(discoveries>4))
vecteur_n
quantile=qchisq(0.95, 4)
vecteur_geom=dgeom(seq(0,4,1),max_vraisemblance_geo)
vecteur_geom=c(vecteur_geom,1-sum(vecteur_geom))
somme_geo=0
for (i in seq(1,6)){
res= somme_geo
somme_geo=res+((vecteur_n[i]-n*vecteur_geom[i])**2)/(n*vecteur_geom[i])
}
somme_geo<quantile
vecteur_poisson=dpois(seq(0,4,1),max_vraisemblance_poisson)
vecteur_poisson=c(vecteur_poisson,1-sum(vecteur_poisson))
somme_poisson=0
for (i in seq(1,6)){
res= somme_poisson
somme_poisson=res+((vecteur_n[i]-n*vecteur_poisson[i])**2)/(n*vecteur_poisson[i])
}
somme_poisson<quantile
s = qpois(0.95, 3*n)
s
sum(discoveries)>s
m=mean(discoveries)
min=ceiling(s/m)
min
beta = function(l){
1-ppois(s,100*l)
}
lambda=seq(3,4,0.1)
Beta=lapply(lambda,FUN='beta')
plot(lambda,Beta,type='line',main="Fonction B en fonction de lambda")
beta = function(nb){
1-ppois(s,nb*3.5)
}
nombre_de_donnees=seq(60,150,1)
Beta=lapply(nombre_de_donnees,FUN='beta')
plot(nombre_de_donnees,Beta,type='line',main="fonction B en fonction de n")
i=1
while (Beta[i]<0.9){
i=i+1}
nombre_de_donnees[i]
k = 0.25 + sum(discoveries)
k
theta = 1/(n + 1/20)
theta
esperance_posteriori = k * theta
esperance_posteriori
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
borne_sup = qgamma( (1+alpha)/2 ,shape = k, scale = theta)
cat("I=[",borne_inf,borne_sup,"]")
data(discoveries)
require(graphics)
plot(discoveries, ylab = "Number of important discoveries",type='h',
las = 1)
n = length(discoveries)
max_vraisemblance_geo= 1/(1+sum(discoveries)/n)
print("theta =")
max_vraisemblance_geo
plot(dgeom(discoveries,max_vraisemblance_geo),ylab="Probabilité",main="Probabilité selon loi géométrique")
max_vraisemblance_poisson=sum(discoveries)/n
print("theta =")
max_vraisemblance_poisson
plot(dpois(discoveries,max_vraisemblance_geo),ylab="Probabilité pour loi de poisson",main="Probabilité selon loi de poisson")
esperance_echantillon = mean(discoveries)
variance_echantillon = var(discoveries)
print("esperance et variance de l'échantillon :")
esperance_echantillon
variance_echantillon
esperance_geo = (1 / max_vraisemblance_geo )
variance_geo = (( 1 - max_vraisemblance_geo)/( max_vraisemblance_geo ^2))
print("esperance et variance pour une loi géométrique :")
esperance_geo
variance_geo
esperance_poisson = max_vraisemblance_poisson
variance_poisson = max_vraisemblance_poisson
print("esperance et variance pour une loi de poisson :")
esperance_poisson
variance_poisson
hist(discoveries,xlim=c(0,12),breaks=10,proba=TRUE,freq=FALSE,col="blue")
density_geom=dgeom(seq(0,12,1),max_vraisemblance_geo)
density_poisson=dpois(seq(0,12,1),max_vraisemblance_poisson)
lines(seq(0,12,1),density_geom,col="red")
lines(seq(0,12,1),density_poisson,col="green")
legend(x="topright",legend=c("loi géométrique","loi de poisson"),col=c("red","green"),lty=1:1,cex=1)
loi_geom=qgeom(seq(0, 1, length.out = n) ,max_vraisemblance_geo)
discoveries_sorted=sort(discoveries)
plot(discoveries_sorted,loi_geom)
lines(discoveries_sorted,discoveries_sorted)
loi_poisson=qpois(seq(0, 1, length.out = n) ,max_vraisemblance_poisson)
plot(discoveries_sorted,loi_poisson)
lines(discoveries_sorted,discoveries_sorted)
vecteur_n=c(sum(discoveries==0),sum(discoveries==1),sum(discoveries==2),sum(discoveries==3),sum(discoveries==4),sum(discoveries>4))
vecteur_n
quantile=qchisq(0.95, 4)
vecteur_geom=dgeom(seq(0,4,1),max_vraisemblance_geo)
vecteur_geom=c(vecteur_geom,1-sum(vecteur_geom))
somme_geo=0
for (i in seq(1,6)){
res= somme_geo
somme_geo=res+((vecteur_n[i]-n*vecteur_geom[i])**2)/(n*vecteur_geom[i])
}
somme_geo<quantile
vecteur_poisson=dpois(seq(0,4,1),max_vraisemblance_poisson)
vecteur_poisson=c(vecteur_poisson,1-sum(vecteur_poisson))
somme_poisson=0
for (i in seq(1,6)){
res= somme_poisson
somme_poisson=res+((vecteur_n[i]-n*vecteur_poisson[i])**2)/(n*vecteur_poisson[i])
}
somme_poisson<quantile
s = qpois(0.95, 3*n)
s
sum(discoveries)>s
m=mean(discoveries)
min=ceiling(s/m)
min
beta = function(l){
1-ppois(s,100*l)
}
lambda=seq(3,4,0.1)
Beta=lapply(lambda,FUN='beta')
plot(lambda,Beta,type='line',main="Fonction B en fonction de lambda")
beta = function(nb){
1-ppois(s,nb*3.5)
}
nombre_de_donnees=seq(60,150,1)
Beta=lapply(nombre_de_donnees,FUN='beta')
plot(nombre_de_donnees,Beta,type='line',main="fonction B en fonction de n")
i=1
while (Beta[i]<0.9){
i=i+1}
nombre_de_donnees[i]
k = 0.25 + sum(discoveries)
k
theta = 1/(n + 1/20)
theta
esperance_posteriori = k * theta
esperance_posteriori
alpha = 0.95
borne_inf = qgamma( (1-alpha)/2 ,shape = k, scale = theta)
borne_sup = qgamma( (1+alpha)/2 ,shape = k, scale = theta)
cat("I=[",borne_inf,borne_sup,"]")
n = length(discoveries)
max_vraisemblance_geo= 1/(1+sum(discoveries)/n)
cap("theta =",max_vraisemblance_geo)
max_vraisemblance_poisson=sum(discoveries)/n
cat("theta =",max_vraisemblance_poisson)
plot(dpois(discoveries,max_vraisemblance_geo),ylab="Probabilité pour loi de poisson",main="Probabilité selon loi de poisson")
data("discoveries")
theta = 1/(1+sum(discoveries)/length(discoveries))
theta
lambda = sum(discoveries)/length(discoveries)
lambda
mean_empirique = mean(discoveries)
var_empirique = var(discoveries)
mean_geo = 1 / theta
var_geo = (1 - theta)/theta**2
mean_poisson = lambda
var_poisson = lambda
mean_empirique
mean_geo
mean_poisson
var_empirique
var_geo
var_poisson
ABSC = seq.int(min(discoveries),max(discoveries),1)
## Crée une "grille" de taille 100, de même plage que les données X.
DENSITY_geo = dgeom(ABSC, theta)
## densité de la loi géométrique évaluée sur la grille
DENSITY_poiss = dpois(ABSC, lambda)
## densité de la loi de Poisson évaluée sur la grille
hist(discoveries, ## premier argument: les données dont on veut l'histogramme.
probability=TRUE, ## pour une échelle en fréquence,
## pas en nombre de points dans chaque case
main="Histogramme des découvertes" ## le titre
)
lines(x = ABSC, y = DENSITY_geo, col="green")
lines(x = ABSC, y = DENSITY_poiss, col="red")
legend("topright",
legend =c("Densité géométrique",  "Densité de Poisson", "Histogramme"),
lty=1, ## pour avoir des traits pleins
col=c("green", "red","black"))
n = length(discoveries)
ordered_discoveries = sort(discoveries)
prob_vect = seq(0, 1, length.out = n)
Q_geo = qgeom(prob_vect,theta)
plot(ordered_discoveries, Q_geo )
lines(ordered_discoveries,ordered_discoveries, type = "l")
prob_vect = seq(0, 1, length.out = n)
Q_poiss = qpois(prob_vect,lambda)
plot(ordered_discoveries, Q_poiss )
lines(ordered_discoveries,ordered_discoveries, type = "l")
n_0 = sum(discoveries == 0)
n_1 = sum(discoveries == 1)
n_2 = sum(discoveries == 2)
n_3 = sum(discoveries == 3)
n_4 = sum(discoveries == 4)
n_5 = sum(discoveries > 4)
n_vect = c(n_0, n_1, n_2, n_3, n_4, n_5)
probability_geom = function(x,t){
t*(1-t)**x
}
probability_poiss = function(x, l){
(l**x)*exp(-l)/factorial(x)
}
p_geom = (theta**n)*(1-theta)**(sum(discoveries))
prod(probability_geom(discoveries, theta))
p_poisson = (lambda**(sum(discoveries)))*exp(-n*lambda)/(prod(factorial(discoveries)))
prod(probability_poiss(discoveries, lambda))
p_vect_poisson = probability_poiss(c(0,1,2,3,4), lambda)
p_vect_poisson = c(p_vect_poisson, 1 - sum(p_vect_poisson))
S_poisson = ((n_vect - p_vect_poisson*n)**2)
S_poisson = mapply(FUN = `/`, S_poisson, p_vect_poisson*n, SIMPLIFY = FALSE)
S_poisson = sum(unlist(S_poisson, use.names=FALSE))
p_vect_geom = probability_geom(c(0,1,2,3,4), theta)
p_vect_geom = c(p_vect_geom, 1 - sum(p_vect_geom))
S_geom = ((n_vect - p_vect_geom*n)**2)
S_geom = mapply(FUN = `/`, S_geom, p_vect_geom*n, SIMPLIFY = FALSE)
S_geom = sum(unlist(S_geom, use.names=FALSE))
qchisq(0.95, 4)>= S_poisson
qchisq(0.95, 4)>= S_geom
s = qpois(0.95, 3*n)
s
sum(discoveries)>s
m = mean(discoveries)
nombre_min = trunc(s/m)+1
nombre_min
beta = function(lambda){
1-ppois(s,n*lambda)
}
lambda_seq = seq(3,4, 0.1)
beta_seq = lapply(FUN = `beta`, lambda_seq)
plot(lambda_seq, beta_seq, type = "b")
zeta = function(n){
1 - ppois(s,n*3.5)
}
n_seq = seq(80,110)
zeta_seq = lapply(FUN = `zeta`, n_seq)
plot(n_seq, zeta_seq, type = "b")
zeta_seq >= 0.9
zeta_seq[21]>= 0.9
zeta_seq[22]>= 0.9
n_seq[22]
k_lambda = 0.25 + sum(discoveries)
k_lambda
theta_lambda = 1/(n + 1/20)
theta_lambda
lambda_prior = k_lambda * theta_lambda
lambda_prior
borne_inf = qgamma( 0.05/2 ,shape = k_lambda, scale = theta_lambda)
borne_inf
borne_sup = qgamma( 1.95/2 ,shape = k_lambda, scale = theta_lambda)
borne_sup
